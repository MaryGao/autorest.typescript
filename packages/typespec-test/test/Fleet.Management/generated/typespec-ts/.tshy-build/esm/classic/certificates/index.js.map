{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/certificates/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AASlC,OAAO,EACL,GAAG,EACH,aAAa,EACb,iBAAiB,EACjB,8BAA8B,GAC/B,MAAM,iCAAiC,CAAC;AAwCzC,MAAM,UAAU,eAAe,CAAC,OAA2B;IACzD,OAAO;QACL,GAAG,EAAE,CACH,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,OAAuC,EACvC,EAAE,CACF,GAAG,CACD,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,OAAO,CACR;QACH,aAAa,EAAE,CACb,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,OAAiD,EACjD,EAAE,CACF,aAAa,CACX,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,OAAO,CACR;QACH,iBAAiB,EAAE,CACjB,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,OAAqD,EACrD,EAAE,CACF,iBAAiB,CACf,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,OAAO,CACR;QACH,8BAA8B,EAAE,CAC9B,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,YAAoB,EACpB,IAAmC,EACnC,OAAkE,EAClE,EAAE,CACF,8BAA8B,CAC5B,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,IAAI,EACJ,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,yBAAyB,CACvC,OAA2B;IAE3B,OAAO;QACL,GAAG,eAAe,CAAC,OAAO,CAAC;KAC5B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureSphereContext } from \"../../api/azureSphereContext.js\";\nimport {\n  Certificate,\n  CertificateChainResponse,\n  ProofOfPossessionNonceRequest,\n  ProofOfPossessionNonceResponse,\n} from \"../../models/models.js\";\nimport {\n  get,\n  listByCatalog,\n  retrieveCertChain,\n  retrieveProofOfPossessionNonce,\n} from \"../../api/certificates/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport {\n  CertificatesGetOptionalParams,\n  CertificatesListByCatalogOptionalParams,\n  CertificatesRetrieveCertChainOptionalParams,\n  CertificatesRetrieveProofOfPossessionNonceOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface CertificatesOperations {\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    serialNumber: string,\n    options?: CertificatesGetOptionalParams,\n  ) => Promise<Certificate>;\n  listByCatalog: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    options?: CertificatesListByCatalogOptionalParams,\n  ) => PagedAsyncIterableIterator<Certificate>;\n  retrieveCertChain: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    serialNumber: string,\n    options?: CertificatesRetrieveCertChainOptionalParams,\n  ) => Promise<CertificateChainResponse>;\n  retrieveProofOfPossessionNonce: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    serialNumber: string,\n    body: ProofOfPossessionNonceRequest,\n    options?: CertificatesRetrieveProofOfPossessionNonceOptionalParams,\n  ) => Promise<ProofOfPossessionNonceResponse>;\n}\n\nexport function getCertificates(context: AzureSphereContext) {\n  return {\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      serialNumber: string,\n      options?: CertificatesGetOptionalParams,\n    ) =>\n      get(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        serialNumber,\n        options,\n      ),\n    listByCatalog: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      options?: CertificatesListByCatalogOptionalParams,\n    ) =>\n      listByCatalog(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        options,\n      ),\n    retrieveCertChain: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      serialNumber: string,\n      options?: CertificatesRetrieveCertChainOptionalParams,\n    ) =>\n      retrieveCertChain(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        serialNumber,\n        options,\n      ),\n    retrieveProofOfPossessionNonce: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      serialNumber: string,\n      body: ProofOfPossessionNonceRequest,\n      options?: CertificatesRetrieveProofOfPossessionNonceOptionalParams,\n    ) =>\n      retrieveProofOfPossessionNonce(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        serialNumber,\n        body,\n        options,\n      ),\n  };\n}\n\nexport function getCertificatesOperations(\n  context: AzureSphereContext,\n): CertificatesOperations {\n  return {\n    ...getCertificates(context),\n  };\n}\n"]}