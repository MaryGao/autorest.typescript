{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/catalogs/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureSphereContext } from \"../../api/azureSphereContext.js\";\nimport {\n  Device,\n  Deployment,\n  Image,\n  DeviceGroup,\n  CountDevicesResponse,\n  Catalog,\n  CatalogUpdate,\n  ListDeviceGroupsRequest,\n  DeviceInsight,\n} from \"../../models/models.js\";\nimport {\n  get,\n  createOrUpdate,\n  update,\n  $delete,\n  listByResourceGroup,\n  listBySubscription,\n  countDevices,\n  listDeployments,\n  listDeviceGroups,\n  listDeviceInsights,\n  listDevices,\n  uploadImage,\n} from \"../../api/catalogs/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  CatalogsGetOptionalParams,\n  CatalogsCreateOrUpdateOptionalParams,\n  CatalogsUpdateOptionalParams,\n  CatalogsDeleteOptionalParams,\n  CatalogsListByResourceGroupOptionalParams,\n  CatalogsListBySubscriptionOptionalParams,\n  CatalogsCountDevicesOptionalParams,\n  CatalogsListDeploymentsOptionalParams,\n  CatalogsListDeviceGroupsOptionalParams,\n  CatalogsListDeviceInsightsOptionalParams,\n  CatalogsListDevicesOptionalParams,\n  CatalogsUploadImageOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface CatalogsOperations {\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    options?: CatalogsGetOptionalParams,\n  ) => Promise<Catalog>;\n  createOrUpdate: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    resource: Catalog,\n    options?: CatalogsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Catalog>, Catalog>;\n  update: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    properties: CatalogUpdate,\n    options?: CatalogsUpdateOptionalParams,\n  ) => Promise<Catalog>;\n  delete: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    options?: CatalogsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  listByResourceGroup: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    options?: CatalogsListByResourceGroupOptionalParams,\n  ) => PagedAsyncIterableIterator<Catalog>;\n  listBySubscription: (\n    subscriptionId: string,\n    options?: CatalogsListBySubscriptionOptionalParams,\n  ) => PagedAsyncIterableIterator<Catalog>;\n  countDevices: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    options?: CatalogsCountDevicesOptionalParams,\n  ) => Promise<CountDevicesResponse>;\n  listDeployments: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    options?: CatalogsListDeploymentsOptionalParams,\n  ) => PagedAsyncIterableIterator<Deployment>;\n  listDeviceGroups: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    body: ListDeviceGroupsRequest,\n    options?: CatalogsListDeviceGroupsOptionalParams,\n  ) => PagedAsyncIterableIterator<DeviceGroup>;\n  listDeviceInsights: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    options?: CatalogsListDeviceInsightsOptionalParams,\n  ) => PagedAsyncIterableIterator<DeviceInsight>;\n  listDevices: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    options?: CatalogsListDevicesOptionalParams,\n  ) => PagedAsyncIterableIterator<Device>;\n  uploadImage: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    body: Image,\n    options?: CatalogsUploadImageOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n}\n\nexport function getCatalogs(context: AzureSphereContext) {\n  return {\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      options?: CatalogsGetOptionalParams,\n    ) => get(context, subscriptionId, resourceGroupName, catalogName, options),\n    createOrUpdate: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      resource: Catalog,\n      options?: CatalogsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        resource,\n        options,\n      ),\n    update: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      properties: CatalogUpdate,\n      options?: CatalogsUpdateOptionalParams,\n    ) =>\n      update(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        properties,\n        options,\n      ),\n    delete: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      options?: CatalogsDeleteOptionalParams,\n    ) =>\n      $delete(context, subscriptionId, resourceGroupName, catalogName, options),\n    listByResourceGroup: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      options?: CatalogsListByResourceGroupOptionalParams,\n    ) =>\n      listByResourceGroup(context, subscriptionId, resourceGroupName, options),\n    listBySubscription: (\n      subscriptionId: string,\n      options?: CatalogsListBySubscriptionOptionalParams,\n    ) => listBySubscription(context, subscriptionId, options),\n    countDevices: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      options?: CatalogsCountDevicesOptionalParams,\n    ) =>\n      countDevices(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        options,\n      ),\n    listDeployments: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      options?: CatalogsListDeploymentsOptionalParams,\n    ) =>\n      listDeployments(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        options,\n      ),\n    listDeviceGroups: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      body: ListDeviceGroupsRequest,\n      options?: CatalogsListDeviceGroupsOptionalParams,\n    ) =>\n      listDeviceGroups(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        body,\n        options,\n      ),\n    listDeviceInsights: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      options?: CatalogsListDeviceInsightsOptionalParams,\n    ) =>\n      listDeviceInsights(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        options,\n      ),\n    listDevices: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      options?: CatalogsListDevicesOptionalParams,\n    ) =>\n      listDevices(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        options,\n      ),\n    uploadImage: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      body: Image,\n      options?: CatalogsUploadImageOptionalParams,\n    ) =>\n      uploadImage(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        body,\n        options,\n      ),\n  };\n}\n\nexport function getCatalogsOperations(\n  context: AzureSphereContext,\n): CatalogsOperations {\n  return {\n    ...getCatalogs(context),\n  };\n}\n"]}