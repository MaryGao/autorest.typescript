{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/api/certificates/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  Certificate,\n  CertificateListResult,\n  CertificateChainResponse,\n  ProofOfPossessionNonceRequest,\n  ProofOfPossessionNonceResponse,\n} from \"../../models/models.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { buildPagedAsyncIterator } from \"../pagingHelpers.js\";\nimport {\n  isUnexpected,\n  AzureSphereContext as Client,\n  CertificatesGet200Response,\n  CertificatesGetDefaultResponse,\n  CertificatesListByCatalog200Response,\n  CertificatesListByCatalogDefaultResponse,\n  CertificatesRetrieveCertChain200Response,\n  CertificatesRetrieveCertChainDefaultResponse,\n  CertificatesRetrieveProofOfPossessionNonce200Response,\n  CertificatesRetrieveProofOfPossessionNonceDefaultResponse,\n} from \"../../rest/index.js\";\nimport {\n  StreamableMethod,\n  operationOptionsToRequestParameters,\n  createRestError,\n} from \"@azure-rest/core-client\";\nimport {\n  CertificatesGetOptionalParams,\n  CertificatesListByCatalogOptionalParams,\n  CertificatesRetrieveCertChainOptionalParams,\n  CertificatesRetrieveProofOfPossessionNonceOptionalParams,\n} from \"../../models/options.js\";\n\nexport function _getSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  catalogName: string,\n  serialNumber: string,\n  options: CertificatesGetOptionalParams = { requestOptions: {} },\n): StreamableMethod<\n  CertificatesGet200Response | CertificatesGetDefaultResponse\n> {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/certificates/{serialNumber}\",\n      subscriptionId,\n      resourceGroupName,\n      catalogName,\n      serialNumber,\n    )\n    .get({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _getDeserialize(\n  result: CertificatesGet200Response | CertificatesGetDefaultResponse,\n): Promise<Certificate> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    id: result.body[\"id\"],\n    type: result.body[\"type\"],\n    systemData: !result.body.systemData\n      ? undefined\n      : {\n          createdBy: result.body.systemData?.[\"createdBy\"],\n          createdByType: result.body.systemData?.[\"createdByType\"],\n          createdAt:\n            result.body.systemData?.[\"createdAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"createdAt\"])\n              : undefined,\n          lastModifiedBy: result.body.systemData?.[\"lastModifiedBy\"],\n          lastModifiedByType: result.body.systemData?.[\"lastModifiedByType\"],\n          lastModifiedAt:\n            result.body.systemData?.[\"lastModifiedAt\"] !== undefined\n              ? new Date(result.body.systemData?.[\"lastModifiedAt\"])\n              : undefined,\n        },\n    properties: !result.body.properties\n      ? undefined\n      : {\n          certificate: result.body.properties?.[\"certificate\"],\n          status: result.body.properties?.[\"status\"],\n          subject: result.body.properties?.[\"subject\"],\n          thumbprint: result.body.properties?.[\"thumbprint\"],\n          expiryUtc:\n            result.body.properties?.[\"expiryUtc\"] !== undefined\n              ? new Date(result.body.properties?.[\"expiryUtc\"])\n              : undefined,\n          notBeforeUtc:\n            result.body.properties?.[\"notBeforeUtc\"] !== undefined\n              ? new Date(result.body.properties?.[\"notBeforeUtc\"])\n              : undefined,\n          provisioningState: result.body.properties?.[\"provisioningState\"],\n        },\n  };\n}\n\n/** Get a Certificate */\nexport async function get(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  catalogName: string,\n  serialNumber: string,\n  options: CertificatesGetOptionalParams = { requestOptions: {} },\n): Promise<Certificate> {\n  const result = await _getSend(\n    context,\n    subscriptionId,\n    resourceGroupName,\n    catalogName,\n    serialNumber,\n    options,\n  );\n  return _getDeserialize(result);\n}\n\nexport function _listByCatalogSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  catalogName: string,\n  options: CertificatesListByCatalogOptionalParams = { requestOptions: {} },\n): StreamableMethod<\n  | CertificatesListByCatalog200Response\n  | CertificatesListByCatalogDefaultResponse\n> {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/certificates\",\n      subscriptionId,\n      resourceGroupName,\n      catalogName,\n    )\n    .get({\n      ...operationOptionsToRequestParameters(options),\n      queryParameters: {\n        $filter: options?.filter,\n        $top: options?.top,\n        $skip: options?.skip,\n        $maxpagesize: options?.maxpagesize,\n      },\n    });\n}\n\nexport async function _listByCatalogDeserialize(\n  result:\n    | CertificatesListByCatalog200Response\n    | CertificatesListByCatalogDefaultResponse,\n): Promise<CertificateListResult> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    value: result.body[\"value\"].map((p) => ({\n      id: p[\"id\"],\n      type: p[\"type\"],\n      systemData: !p.systemData\n        ? undefined\n        : {\n            createdBy: p.systemData?.[\"createdBy\"],\n            createdByType: p.systemData?.[\"createdByType\"],\n            createdAt:\n              p.systemData?.[\"createdAt\"] !== undefined\n                ? new Date(p.systemData?.[\"createdAt\"])\n                : undefined,\n            lastModifiedBy: p.systemData?.[\"lastModifiedBy\"],\n            lastModifiedByType: p.systemData?.[\"lastModifiedByType\"],\n            lastModifiedAt:\n              p.systemData?.[\"lastModifiedAt\"] !== undefined\n                ? new Date(p.systemData?.[\"lastModifiedAt\"])\n                : undefined,\n          },\n      properties: !p.properties\n        ? undefined\n        : {\n            certificate: p.properties?.[\"certificate\"],\n            status: p.properties?.[\"status\"],\n            subject: p.properties?.[\"subject\"],\n            thumbprint: p.properties?.[\"thumbprint\"],\n            expiryUtc:\n              p.properties?.[\"expiryUtc\"] !== undefined\n                ? new Date(p.properties?.[\"expiryUtc\"])\n                : undefined,\n            notBeforeUtc:\n              p.properties?.[\"notBeforeUtc\"] !== undefined\n                ? new Date(p.properties?.[\"notBeforeUtc\"])\n                : undefined,\n            provisioningState: p.properties?.[\"provisioningState\"],\n          },\n    })),\n    nextLink: result.body[\"nextLink\"],\n  };\n}\n\n/** List Certificate resources by Catalog */\nexport function listByCatalog(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  catalogName: string,\n  options: CertificatesListByCatalogOptionalParams = { requestOptions: {} },\n): PagedAsyncIterableIterator<Certificate> {\n  return buildPagedAsyncIterator(\n    context,\n    () =>\n      _listByCatalogSend(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        options,\n      ),\n    _listByCatalogDeserialize,\n    { itemName: \"value\", nextLinkName: \"nextLink\" },\n  );\n}\n\nexport function _retrieveCertChainSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  catalogName: string,\n  serialNumber: string,\n  options: CertificatesRetrieveCertChainOptionalParams = { requestOptions: {} },\n): StreamableMethod<\n  | CertificatesRetrieveCertChain200Response\n  | CertificatesRetrieveCertChainDefaultResponse\n> {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/certificates/{serialNumber}/retrieveCertChain\",\n      subscriptionId,\n      resourceGroupName,\n      catalogName,\n      serialNumber,\n    )\n    .post({ ...operationOptionsToRequestParameters(options) });\n}\n\nexport async function _retrieveCertChainDeserialize(\n  result:\n    | CertificatesRetrieveCertChain200Response\n    | CertificatesRetrieveCertChainDefaultResponse,\n): Promise<CertificateChainResponse> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    certificateChain: result.body[\"certificateChain\"],\n  };\n}\n\n/** Retrieves cert chain. */\nexport async function retrieveCertChain(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  catalogName: string,\n  serialNumber: string,\n  options: CertificatesRetrieveCertChainOptionalParams = { requestOptions: {} },\n): Promise<CertificateChainResponse> {\n  const result = await _retrieveCertChainSend(\n    context,\n    subscriptionId,\n    resourceGroupName,\n    catalogName,\n    serialNumber,\n    options,\n  );\n  return _retrieveCertChainDeserialize(result);\n}\n\nexport function _retrieveProofOfPossessionNonceSend(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  catalogName: string,\n  serialNumber: string,\n  body: ProofOfPossessionNonceRequest,\n  options: CertificatesRetrieveProofOfPossessionNonceOptionalParams = {\n    requestOptions: {},\n  },\n): StreamableMethod<\n  | CertificatesRetrieveProofOfPossessionNonce200Response\n  | CertificatesRetrieveProofOfPossessionNonceDefaultResponse\n> {\n  return context\n    .path(\n      \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/certificates/{serialNumber}/retrieveProofOfPossessionNonce\",\n      subscriptionId,\n      resourceGroupName,\n      catalogName,\n      serialNumber,\n    )\n    .post({\n      ...operationOptionsToRequestParameters(options),\n      body: { proofOfPossessionNonce: body[\"proofOfPossessionNonce\"] },\n    });\n}\n\nexport async function _retrieveProofOfPossessionNonceDeserialize(\n  result:\n    | CertificatesRetrieveProofOfPossessionNonce200Response\n    | CertificatesRetrieveProofOfPossessionNonceDefaultResponse,\n): Promise<ProofOfPossessionNonceResponse> {\n  if (isUnexpected(result)) {\n    throw createRestError(result);\n  }\n\n  return {\n    certificate: result.body[\"certificate\"],\n    status: result.body[\"status\"],\n    subject: result.body[\"subject\"],\n    thumbprint: result.body[\"thumbprint\"],\n    expiryUtc:\n      result.body[\"expiryUtc\"] !== undefined\n        ? new Date(result.body[\"expiryUtc\"])\n        : undefined,\n    notBeforeUtc:\n      result.body[\"notBeforeUtc\"] !== undefined\n        ? new Date(result.body[\"notBeforeUtc\"])\n        : undefined,\n    provisioningState: result.body[\"provisioningState\"],\n  };\n}\n\n/** Gets the proof of possession nonce. */\nexport async function retrieveProofOfPossessionNonce(\n  context: Client,\n  subscriptionId: string,\n  resourceGroupName: string,\n  catalogName: string,\n  serialNumber: string,\n  body: ProofOfPossessionNonceRequest,\n  options: CertificatesRetrieveProofOfPossessionNonceOptionalParams = {\n    requestOptions: {},\n  },\n): Promise<ProofOfPossessionNonceResponse> {\n  const result = await _retrieveProofOfPossessionNonceSend(\n    context,\n    subscriptionId,\n    resourceGroupName,\n    catalogName,\n    serialNumber,\n    body,\n    options,\n  );\n  return _retrieveProofOfPossessionNonceDeserialize(result);\n}\n"]}