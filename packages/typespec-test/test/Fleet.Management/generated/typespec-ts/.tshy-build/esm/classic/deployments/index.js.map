{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/deployments/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EACL,GAAG,EACH,cAAc,EACd,OAAO,EACP,iBAAiB,GAClB,MAAM,gCAAgC,CAAC;AAiDxC,MAAM,UAAU,cAAc,CAAC,OAA2B;IACxD,OAAO;QACL,GAAG,EAAE,CACH,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,cAAsB,EACtB,OAAsC,EACtC,EAAE,CACF,GAAG,CACD,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,cAAc,EACd,OAAO,CACR;QACH,cAAc,EAAE,CACd,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,cAAsB,EACtB,QAAoB,EACpB,OAAiD,EACjD,EAAE,CACF,cAAc,CACZ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,cAAc,EACd,QAAQ,EACR,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,cAAsB,EACtB,OAAyC,EACzC,EAAE,CACF,OAAO,CACL,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,cAAc,EACd,OAAO,CACR;QACH,iBAAiB,EAAE,CACjB,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,OAAoD,EACpD,EAAE,CACF,iBAAiB,CACf,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,wBAAwB,CACtC,OAA2B;IAE3B,OAAO;QACL,GAAG,cAAc,CAAC,OAAO,CAAC;KAC3B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureSphereContext } from \"../../api/azureSphereContext.js\";\nimport { Deployment } from \"../../models/models.js\";\nimport {\n  get,\n  createOrUpdate,\n  $delete,\n  listByDeviceGroup,\n} from \"../../api/deployments/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  DeploymentsGetOptionalParams,\n  DeploymentsCreateOrUpdateOptionalParams,\n  DeploymentsDeleteOptionalParams,\n  DeploymentsListByDeviceGroupOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface DeploymentsOperations {\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    deploymentName: string,\n    options?: DeploymentsGetOptionalParams,\n  ) => Promise<Deployment>;\n  createOrUpdate: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    deploymentName: string,\n    resource: Deployment,\n    options?: DeploymentsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Deployment>, Deployment>;\n  delete: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    deploymentName: string,\n    options?: DeploymentsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  listByDeviceGroup: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    options?: DeploymentsListByDeviceGroupOptionalParams,\n  ) => PagedAsyncIterableIterator<Deployment>;\n}\n\nexport function getDeployments(context: AzureSphereContext) {\n  return {\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      deploymentName: string,\n      options?: DeploymentsGetOptionalParams,\n    ) =>\n      get(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        deploymentName,\n        options,\n      ),\n    createOrUpdate: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      deploymentName: string,\n      resource: Deployment,\n      options?: DeploymentsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        deploymentName,\n        resource,\n        options,\n      ),\n    delete: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      deploymentName: string,\n      options?: DeploymentsDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        deploymentName,\n        options,\n      ),\n    listByDeviceGroup: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      options?: DeploymentsListByDeviceGroupOptionalParams,\n    ) =>\n      listByDeviceGroup(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        options,\n      ),\n  };\n}\n\nexport function getDeploymentsOperations(\n  context: AzureSphereContext,\n): DeploymentsOperations {\n  return {\n    ...getDeployments(context),\n  };\n}\n"]}