{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/deviceGroups/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AASlC,OAAO,EACL,GAAG,EACH,cAAc,EACd,MAAM,EACN,OAAO,EACP,aAAa,EACb,YAAY,EACZ,YAAY,GACb,MAAM,iCAAiC,CAAC;AA0EzC,MAAM,UAAU,eAAe,CAAC,OAA2B;IACzD,OAAO;QACL,GAAG,EAAE,CACH,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,OAAuC,EACvC,EAAE,CACF,GAAG,CACD,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,OAAO,CACR;QACH,cAAc,EAAE,CACd,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,QAAqB,EACrB,OAAkD,EAClD,EAAE,CACF,cAAc,CACZ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,QAAQ,EACR,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,UAA6B,EAC7B,OAA0C,EAC1C,EAAE,CACF,MAAM,CACJ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,UAAU,EACV,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,OAA0C,EAC1C,EAAE,CACF,OAAO,CACL,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,OAAO,CACR;QACH,aAAa,EAAE,CACb,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,OAAiD,EACjD,EAAE,CACF,aAAa,CACX,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,OAAO,CACR;QACH,YAAY,EAAE,CACZ,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,IAAyB,EACzB,OAAgD,EAChD,EAAE,CACF,YAAY,CACV,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,IAAI,EACJ,OAAO,CACR;QACH,YAAY,EAAE,CACZ,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,OAAgD,EAChD,EAAE,CACF,YAAY,CACV,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,yBAAyB,CACvC,OAA2B;IAE3B,OAAO;QACL,GAAG,eAAe,CAAC,OAAO,CAAC;KAC5B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureSphereContext } from \"../../api/azureSphereContext.js\";\nimport {\n  DeviceGroup,\n  DeviceGroupUpdate,\n  ClaimDevicesRequest,\n  CountDevicesResponse,\n} from \"../../models/models.js\";\nimport {\n  get,\n  createOrUpdate,\n  update,\n  $delete,\n  listByProduct,\n  claimDevices,\n  countDevices,\n} from \"../../api/deviceGroups/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  DeviceGroupsGetOptionalParams,\n  DeviceGroupsCreateOrUpdateOptionalParams,\n  DeviceGroupsUpdateOptionalParams,\n  DeviceGroupsDeleteOptionalParams,\n  DeviceGroupsListByProductOptionalParams,\n  DeviceGroupsClaimDevicesOptionalParams,\n  DeviceGroupsCountDevicesOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface DeviceGroupsOperations {\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    options?: DeviceGroupsGetOptionalParams,\n  ) => Promise<DeviceGroup>;\n  createOrUpdate: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    resource: DeviceGroup,\n    options?: DeviceGroupsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<DeviceGroup>, DeviceGroup>;\n  update: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    properties: DeviceGroupUpdate,\n    options?: DeviceGroupsUpdateOptionalParams,\n  ) => PollerLike<OperationState<DeviceGroup>, DeviceGroup>;\n  delete: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    options?: DeviceGroupsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  listByProduct: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    options?: DeviceGroupsListByProductOptionalParams,\n  ) => PagedAsyncIterableIterator<DeviceGroup>;\n  claimDevices: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    body: ClaimDevicesRequest,\n    options?: DeviceGroupsClaimDevicesOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  countDevices: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    options?: DeviceGroupsCountDevicesOptionalParams,\n  ) => Promise<CountDevicesResponse>;\n}\n\nexport function getDeviceGroups(context: AzureSphereContext) {\n  return {\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      options?: DeviceGroupsGetOptionalParams,\n    ) =>\n      get(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        options,\n      ),\n    createOrUpdate: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      resource: DeviceGroup,\n      options?: DeviceGroupsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        resource,\n        options,\n      ),\n    update: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      properties: DeviceGroupUpdate,\n      options?: DeviceGroupsUpdateOptionalParams,\n    ) =>\n      update(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        properties,\n        options,\n      ),\n    delete: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      options?: DeviceGroupsDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        options,\n      ),\n    listByProduct: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      options?: DeviceGroupsListByProductOptionalParams,\n    ) =>\n      listByProduct(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        options,\n      ),\n    claimDevices: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      body: ClaimDevicesRequest,\n      options?: DeviceGroupsClaimDevicesOptionalParams,\n    ) =>\n      claimDevices(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        body,\n        options,\n      ),\n    countDevices: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      options?: DeviceGroupsCountDevicesOptionalParams,\n    ) =>\n      countDevices(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        options,\n      ),\n  };\n}\n\nexport function getDeviceGroupsOperations(\n  context: AzureSphereContext,\n): DeviceGroupsOperations {\n  return {\n    ...getDeviceGroups(context),\n  };\n}\n"]}