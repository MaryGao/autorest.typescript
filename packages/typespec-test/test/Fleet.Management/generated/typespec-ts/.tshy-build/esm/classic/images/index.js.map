{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/images/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EACL,GAAG,EACH,cAAc,EACd,OAAO,EACP,aAAa,GACd,MAAM,2BAA2B,CAAC;AAyCnC,MAAM,UAAU,SAAS,CAAC,OAA2B;IACnD,OAAO;QACL,GAAG,EAAE,CACH,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,SAAiB,EACjB,OAAiC,EACjC,EAAE,CACF,GAAG,CACD,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,SAAS,EACT,OAAO,CACR;QACH,cAAc,EAAE,CACd,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,SAAiB,EACjB,QAAe,EACf,OAA4C,EAC5C,EAAE,CACF,cAAc,CACZ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,SAAS,EACT,QAAQ,EACR,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,SAAiB,EACjB,OAAoC,EACpC,EAAE,CACF,OAAO,CACL,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,SAAS,EACT,OAAO,CACR;QACH,aAAa,EAAE,CACb,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,OAA2C,EAC3C,EAAE,CACF,aAAa,CACX,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mBAAmB,CACjC,OAA2B;IAE3B,OAAO;QACL,GAAG,SAAS,CAAC,OAAO,CAAC;KACtB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureSphereContext } from \"../../api/azureSphereContext.js\";\nimport { Image } from \"../../models/models.js\";\nimport {\n  get,\n  createOrUpdate,\n  $delete,\n  listByCatalog,\n} from \"../../api/images/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  ImagesGetOptionalParams,\n  ImagesCreateOrUpdateOptionalParams,\n  ImagesDeleteOptionalParams,\n  ImagesListByCatalogOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface ImagesOperations {\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    imageName: string,\n    options?: ImagesGetOptionalParams,\n  ) => Promise<Image>;\n  createOrUpdate: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    imageName: string,\n    resource: Image,\n    options?: ImagesCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Image>, Image>;\n  delete: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    imageName: string,\n    options?: ImagesDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  listByCatalog: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    options?: ImagesListByCatalogOptionalParams,\n  ) => PagedAsyncIterableIterator<Image>;\n}\n\nexport function getImages(context: AzureSphereContext) {\n  return {\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      imageName: string,\n      options?: ImagesGetOptionalParams,\n    ) =>\n      get(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        imageName,\n        options,\n      ),\n    createOrUpdate: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      imageName: string,\n      resource: Image,\n      options?: ImagesCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        imageName,\n        resource,\n        options,\n      ),\n    delete: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      imageName: string,\n      options?: ImagesDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        imageName,\n        options,\n      ),\n    listByCatalog: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      options?: ImagesListByCatalogOptionalParams,\n    ) =>\n      listByCatalog(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        options,\n      ),\n  };\n}\n\nexport function getImagesOperations(\n  context: AzureSphereContext,\n): ImagesOperations {\n  return {\n    ...getImages(context),\n  };\n}\n"]}