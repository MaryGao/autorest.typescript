{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/devices/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AASlC,OAAO,EACL,GAAG,EACH,cAAc,EACd,MAAM,EACN,OAAO,EACP,iBAAiB,EACjB,uBAAuB,GACxB,MAAM,4BAA4B,CAAC;AA0EpC,MAAM,UAAU,UAAU,CAAC,OAA2B;IACpD,OAAO;QACL,GAAG,EAAE,CACH,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,UAAkB,EAClB,OAAkC,EAClC,EAAE,CACF,GAAG,CACD,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,UAAU,EACV,OAAO,CACR;QACH,cAAc,EAAE,CACd,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,UAAkB,EAClB,QAAgB,EAChB,OAA6C,EAC7C,EAAE,CACF,cAAc,CACZ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,UAAU,EACV,QAAQ,EACR,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,UAAkB,EAClB,UAAwB,EACxB,OAAqC,EACrC,EAAE,CACF,MAAM,CACJ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,UAAU,EACV,UAAU,EACV,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,UAAkB,EAClB,OAAqC,EACrC,EAAE,CACF,OAAO,CACL,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,UAAU,EACV,OAAO,CACR;QACH,iBAAiB,EAAE,CACjB,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,OAAgD,EAChD,EAAE,CACF,iBAAiB,CACf,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,OAAO,CACR;QACH,uBAAuB,EAAE,CACvB,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,eAAuB,EACvB,UAAkB,EAClB,IAAoC,EACpC,OAAsD,EACtD,EAAE,CACF,uBAAuB,CACrB,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,eAAe,EACf,UAAU,EACV,IAAI,EACJ,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,oBAAoB,CAClC,OAA2B;IAE3B,OAAO;QACL,GAAG,UAAU,CAAC,OAAO,CAAC;KACvB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureSphereContext } from \"../../api/azureSphereContext.js\";\nimport {\n  Device,\n  DeviceUpdate,\n  GenerateCapabilityImageRequest,\n  SignedCapabilityImageResponse,\n} from \"../../models/models.js\";\nimport {\n  get,\n  createOrUpdate,\n  update,\n  $delete,\n  listByDeviceGroup,\n  generateCapabilityImage,\n} from \"../../api/devices/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  DevicesGetOptionalParams,\n  DevicesCreateOrUpdateOptionalParams,\n  DevicesUpdateOptionalParams,\n  DevicesDeleteOptionalParams,\n  DevicesListByDeviceGroupOptionalParams,\n  DevicesGenerateCapabilityImageOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface DevicesOperations {\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    deviceName: string,\n    options?: DevicesGetOptionalParams,\n  ) => Promise<Device>;\n  createOrUpdate: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    deviceName: string,\n    resource: Device,\n    options?: DevicesCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Device>, Device>;\n  update: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    deviceName: string,\n    properties: DeviceUpdate,\n    options?: DevicesUpdateOptionalParams,\n  ) => Promise<Device>;\n  delete: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    deviceName: string,\n    options?: DevicesDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  listByDeviceGroup: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    options?: DevicesListByDeviceGroupOptionalParams,\n  ) => PagedAsyncIterableIterator<Device>;\n  generateCapabilityImage: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    deviceGroupName: string,\n    deviceName: string,\n    body: GenerateCapabilityImageRequest,\n    options?: DevicesGenerateCapabilityImageOptionalParams,\n  ) => PollerLike<\n    OperationState<SignedCapabilityImageResponse>,\n    SignedCapabilityImageResponse\n  >;\n}\n\nexport function getDevices(context: AzureSphereContext) {\n  return {\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      deviceName: string,\n      options?: DevicesGetOptionalParams,\n    ) =>\n      get(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        deviceName,\n        options,\n      ),\n    createOrUpdate: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      deviceName: string,\n      resource: Device,\n      options?: DevicesCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        deviceName,\n        resource,\n        options,\n      ),\n    update: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      deviceName: string,\n      properties: DeviceUpdate,\n      options?: DevicesUpdateOptionalParams,\n    ) =>\n      update(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        deviceName,\n        properties,\n        options,\n      ),\n    delete: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      deviceName: string,\n      options?: DevicesDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        deviceName,\n        options,\n      ),\n    listByDeviceGroup: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      options?: DevicesListByDeviceGroupOptionalParams,\n    ) =>\n      listByDeviceGroup(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        options,\n      ),\n    generateCapabilityImage: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      deviceGroupName: string,\n      deviceName: string,\n      body: GenerateCapabilityImageRequest,\n      options?: DevicesGenerateCapabilityImageOptionalParams,\n    ) =>\n      generateCapabilityImage(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        deviceGroupName,\n        deviceName,\n        body,\n        options,\n      ),\n  };\n}\n\nexport function getDevicesOperations(\n  context: AzureSphereContext,\n): DevicesOperations {\n  return {\n    ...getDevices(context),\n  };\n}\n"]}