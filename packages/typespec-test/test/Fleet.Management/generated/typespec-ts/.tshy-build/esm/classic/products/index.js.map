{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/classic/products/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AASlC,OAAO,EACL,GAAG,EACH,cAAc,EACd,MAAM,EACN,OAAO,EACP,aAAa,EACb,YAAY,EACZ,2BAA2B,GAC5B,MAAM,6BAA6B,CAAC;AAkErC,MAAM,UAAU,WAAW,CAAC,OAA2B;IACrD,OAAO;QACL,GAAG,EAAE,CACH,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,OAAmC,EACnC,EAAE,CACF,GAAG,CACD,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,OAAO,CACR;QACH,cAAc,EAAE,CACd,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,QAAiB,EACjB,OAA8C,EAC9C,EAAE,CACF,cAAc,CACZ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,QAAQ,EACR,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,UAAyB,EACzB,OAAsC,EACtC,EAAE,CACF,MAAM,CACJ,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,UAAU,EACV,OAAO,CACR;QACH,MAAM,EAAE,CACN,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,OAAsC,EACtC,EAAE,CACF,OAAO,CACL,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,OAAO,CACR;QACH,aAAa,EAAE,CACb,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,OAA6C,EAC7C,EAAE,CACF,aAAa,CACX,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,OAAO,CACR;QACH,YAAY,EAAE,CACZ,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,OAA4C,EAC5C,EAAE,CACF,YAAY,CACV,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,OAAO,CACR;QACH,2BAA2B,EAAE,CAC3B,cAAsB,EACtB,iBAAyB,EACzB,WAAmB,EACnB,WAAmB,EACnB,OAA2D,EAC3D,EAAE,CACF,2BAA2B,CACzB,OAAO,EACP,cAAc,EACd,iBAAiB,EACjB,WAAW,EACX,WAAW,EACX,OAAO,CACR;KACJ,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,qBAAqB,CACnC,OAA2B;IAE3B,OAAO;QACL,GAAG,WAAW,CAAC,OAAO,CAAC;KACxB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureSphereContext } from \"../../api/azureSphereContext.js\";\nimport {\n  DeviceGroup,\n  CountDevicesResponse,\n  Product,\n  ProductUpdate,\n} from \"../../models/models.js\";\nimport {\n  get,\n  createOrUpdate,\n  update,\n  $delete,\n  listByCatalog,\n  countDevices,\n  generateDefaultDeviceGroups,\n} from \"../../api/products/index.js\";\nimport { PagedAsyncIterableIterator } from \"../../models/pagingTypes.js\";\nimport { PollerLike, OperationState } from \"@azure/core-lro\";\nimport {\n  ProductsGetOptionalParams,\n  ProductsCreateOrUpdateOptionalParams,\n  ProductsUpdateOptionalParams,\n  ProductsDeleteOptionalParams,\n  ProductsListByCatalogOptionalParams,\n  ProductsCountDevicesOptionalParams,\n  ProductsGenerateDefaultDeviceGroupsOptionalParams,\n} from \"../../models/options.js\";\n\nexport interface ProductsOperations {\n  get: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    options?: ProductsGetOptionalParams,\n  ) => Promise<Product>;\n  createOrUpdate: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    resource: Product,\n    options?: ProductsCreateOrUpdateOptionalParams,\n  ) => PollerLike<OperationState<Product>, Product>;\n  update: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    properties: ProductUpdate,\n    options?: ProductsUpdateOptionalParams,\n  ) => PollerLike<OperationState<Product>, Product>;\n  delete: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    options?: ProductsDeleteOptionalParams,\n  ) => PollerLike<OperationState<void>, void>;\n  listByCatalog: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    options?: ProductsListByCatalogOptionalParams,\n  ) => PagedAsyncIterableIterator<Product>;\n  countDevices: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    options?: ProductsCountDevicesOptionalParams,\n  ) => Promise<CountDevicesResponse>;\n  generateDefaultDeviceGroups: (\n    subscriptionId: string,\n    resourceGroupName: string,\n    catalogName: string,\n    productName: string,\n    options?: ProductsGenerateDefaultDeviceGroupsOptionalParams,\n  ) => PagedAsyncIterableIterator<DeviceGroup>;\n}\n\nexport function getProducts(context: AzureSphereContext) {\n  return {\n    get: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      options?: ProductsGetOptionalParams,\n    ) =>\n      get(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        options,\n      ),\n    createOrUpdate: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      resource: Product,\n      options?: ProductsCreateOrUpdateOptionalParams,\n    ) =>\n      createOrUpdate(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        resource,\n        options,\n      ),\n    update: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      properties: ProductUpdate,\n      options?: ProductsUpdateOptionalParams,\n    ) =>\n      update(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        properties,\n        options,\n      ),\n    delete: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      options?: ProductsDeleteOptionalParams,\n    ) =>\n      $delete(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        options,\n      ),\n    listByCatalog: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      options?: ProductsListByCatalogOptionalParams,\n    ) =>\n      listByCatalog(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        options,\n      ),\n    countDevices: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      options?: ProductsCountDevicesOptionalParams,\n    ) =>\n      countDevices(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        options,\n      ),\n    generateDefaultDeviceGroups: (\n      subscriptionId: string,\n      resourceGroupName: string,\n      catalogName: string,\n      productName: string,\n      options?: ProductsGenerateDefaultDeviceGroupsOptionalParams,\n    ) =>\n      generateDefaultDeviceGroups(\n        context,\n        subscriptionId,\n        resourceGroupName,\n        catalogName,\n        productName,\n        options,\n      ),\n  };\n}\n\nexport function getProductsOperations(\n  context: AzureSphereContext,\n): ProductsOperations {\n  return {\n    ...getProducts(context),\n  };\n}\n"]}